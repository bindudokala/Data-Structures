import heapq
from collections import defaultdict

class Solution:
    def leastInterval(self, tasks: List[str], n: int) -> int:
        freq = defaultdict(int)
        maxHeap, q, time = [], [], 0
        for t in tasks:
            freq[t] += 1
        for task in freq:
            maxHeap.append(-freq[task])
        heapq.heapify(maxHeap)
        while(maxHeap or q):
            time += 1
            if maxHeap:
                rem = heapq.heappop(maxHeap) + 1
                if rem != 0:
                    q.append([rem, time + n])
            if q and time == q[0][1]:
                heapq.heappush(maxHeap, q.pop(0)[0])
        return time



'''
üí° Main Idea
‚Ä¢ Count the frequency of each task using a dictionary.

‚Ä¢ Use a max-heap (by storing negative frequencies) to always schedule the task with the highest remaining count.

‚Ä¢ Use a queue q to keep track of tasks in their cooldown period:

    ‚Ä¢ Each queue entry stores the remaining count and the time when it becomes available again (time + n).

‚Ä¢ In each CPU interval unit of time:

    ‚Ä¢ Increment time.

    ‚Ä¢ If the heap isn't empty, run the task with the highest count.

    ‚Ä¢ If that task still has remaining counts, add it to the cooldown queue with its available time.

    ‚Ä¢ If any task in the queue is ready (its cooldown is over), push it back into the heap.

    ‚Ä¢ Repeat until both the heap and queue are empty.

‚Ä¢ Return the total time taken.


‚è≥ Time : O(n log n)
üóÇÔ∏è Space : O(n)
'''